// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/sqlc/store.go
//
// Generated by this command:
//
//	mockgen.exe -destination db/mock/store.go -package mockdb -source ./db/sqlc/store.go Store
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	time "time"

	sqlc "github.com/PSKP-95/scheduler/db/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AssignUnassignedWork mocks base method.
func (m *MockStore) AssignUnassignedWork(ctx context.Context, arg sqlc.AssignUnassignedWorkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUnassignedWork", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUnassignedWork indicates an expected call of AssignUnassignedWork.
func (mr *MockStoreMockRecorder) AssignUnassignedWork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUnassignedWork", reflect.TypeOf((*MockStore)(nil).AssignUnassignedWork), ctx, arg)
}

// ChangeOccurenceStatus mocks base method.
func (m *MockStore) ChangeOccurenceStatus(ctx context.Context, arg sqlc.ChangeOccurenceStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOccurenceStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOccurenceStatus indicates an expected call of ChangeOccurenceStatus.
func (mr *MockStoreMockRecorder) ChangeOccurenceStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOccurenceStatus", reflect.TypeOf((*MockStore)(nil).ChangeOccurenceStatus), ctx, arg)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateHistory mocks base method.
func (m *MockStore) CreateHistory(ctx context.Context, arg sqlc.CreateHistoryParams) (sqlc.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHistory", ctx, arg)
	ret0, _ := ret[0].(sqlc.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHistory indicates an expected call of CreateHistory.
func (mr *MockStoreMockRecorder) CreateHistory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHistory", reflect.TypeOf((*MockStore)(nil).CreateHistory), ctx, arg)
}

// CreateOccurence mocks base method.
func (m *MockStore) CreateOccurence(ctx context.Context, arg sqlc.CreateOccurenceParams) (sqlc.NextOccurence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOccurence", ctx, arg)
	ret0, _ := ret[0].(sqlc.NextOccurence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOccurence indicates an expected call of CreateOccurence.
func (mr *MockStoreMockRecorder) CreateOccurence(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOccurence", reflect.TypeOf((*MockStore)(nil).CreateOccurence), ctx, arg)
}

// CreateSchedule mocks base method.
func (m *MockStore) CreateSchedule(ctx context.Context, arg sqlc.CreateScheduleParams) (sqlc.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", ctx, arg)
	ret0, _ := ret[0].(sqlc.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockStoreMockRecorder) CreateSchedule(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockStore)(nil).CreateSchedule), ctx, arg)
}

// CreateScheduleAddNextOccurence mocks base method.
func (m *MockStore) CreateScheduleAddNextOccurence(ctx context.Context, schedule sqlc.CreateScheduleParams, occurence sqlc.CreateOccurenceParams) (sqlc.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduleAddNextOccurence", ctx, schedule, occurence)
	ret0, _ := ret[0].(sqlc.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleAddNextOccurence indicates an expected call of CreateScheduleAddNextOccurence.
func (mr *MockStoreMockRecorder) CreateScheduleAddNextOccurence(ctx, schedule, occurence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleAddNextOccurence", reflect.TypeOf((*MockStore)(nil).CreateScheduleAddNextOccurence), ctx, schedule, occurence)
}

// CreateWorker mocks base method.
func (m *MockStore) CreateWorker(ctx context.Context, id uuid.UUID) (sqlc.PunchCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorker", ctx, id)
	ret0, _ := ret[0].(sqlc.PunchCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorker indicates an expected call of CreateWorker.
func (mr *MockStoreMockRecorder) CreateWorker(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockStore)(nil).CreateWorker), ctx, id)
}

// DeleteOccurence mocks base method.
func (m *MockStore) DeleteOccurence(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOccurence", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOccurence indicates an expected call of DeleteOccurence.
func (mr *MockStoreMockRecorder) DeleteOccurence(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOccurence", reflect.TypeOf((*MockStore)(nil).DeleteOccurence), ctx, id)
}

// DeleteSchedule mocks base method.
func (m *MockStore) DeleteSchedule(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockStoreMockRecorder) DeleteSchedule(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockStore)(nil).DeleteSchedule), ctx, id)
}

// DeleteWorker mocks base method.
func (m *MockStore) DeleteWorker(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorker", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorker indicates an expected call of DeleteWorker.
func (mr *MockStoreMockRecorder) DeleteWorker(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorker", reflect.TypeOf((*MockStore)(nil).DeleteWorker), ctx, id)
}

// GetNextImmediateWork mocks base method.
func (m *MockStore) GetNextImmediateWork(ctx context.Context, worker uuid.NullUUID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextImmediateWork", ctx, worker)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextImmediateWork indicates an expected call of GetNextImmediateWork.
func (mr *MockStoreMockRecorder) GetNextImmediateWork(ctx, worker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextImmediateWork", reflect.TypeOf((*MockStore)(nil).GetNextImmediateWork), ctx, worker)
}

// GetOccurence mocks base method.
func (m *MockStore) GetOccurence(ctx context.Context, id int32) (sqlc.NextOccurence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccurence", ctx, id)
	ret0, _ := ret[0].(sqlc.NextOccurence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurence indicates an expected call of GetOccurence.
func (mr *MockStoreMockRecorder) GetOccurence(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurence", reflect.TypeOf((*MockStore)(nil).GetOccurence), ctx, id)
}

// GetSchedule mocks base method.
func (m *MockStore) GetSchedule(ctx context.Context, id uuid.UUID) (sqlc.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", ctx, id)
	ret0, _ := ret[0].(sqlc.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockStoreMockRecorder) GetSchedule(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockStore)(nil).GetSchedule), ctx, id)
}

// GetWorker mocks base method.
func (m *MockStore) GetWorker(ctx context.Context, id uuid.UUID) (sqlc.PunchCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorker", ctx, id)
	ret0, _ := ret[0].(sqlc.PunchCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorker indicates an expected call of GetWorker.
func (mr *MockStoreMockRecorder) GetWorker(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorker", reflect.TypeOf((*MockStore)(nil).GetWorker), ctx, id)
}

// ListHistory mocks base method.
func (m *MockStore) ListHistory(ctx context.Context, arg sqlc.ListHistoryParams) ([]sqlc.ListHistoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHistory", ctx, arg)
	ret0, _ := ret[0].([]sqlc.ListHistoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistory indicates an expected call of ListHistory.
func (mr *MockStoreMockRecorder) ListHistory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistory", reflect.TypeOf((*MockStore)(nil).ListHistory), ctx, arg)
}

// ListSchedules mocks base method.
func (m *MockStore) ListSchedules(ctx context.Context, arg sqlc.ListSchedulesParams) ([]sqlc.ListSchedulesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedules", ctx, arg)
	ret0, _ := ret[0].([]sqlc.ListSchedulesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedules indicates an expected call of ListSchedules.
func (mr *MockStoreMockRecorder) ListSchedules(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedules", reflect.TypeOf((*MockStore)(nil).ListSchedules), ctx, arg)
}

// ListWorkers mocks base method.
func (m *MockStore) ListWorkers(ctx context.Context, arg sqlc.ListWorkersParams) ([]sqlc.PunchCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkers", ctx, arg)
	ret0, _ := ret[0].([]sqlc.PunchCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkers indicates an expected call of ListWorkers.
func (mr *MockStoreMockRecorder) ListWorkers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkers", reflect.TypeOf((*MockStore)(nil).ListWorkers), ctx, arg)
}

// MyExpiredWork mocks base method.
func (m *MockStore) MyExpiredWork(ctx context.Context, worker uuid.NullUUID) ([]sqlc.NextOccurence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyExpiredWork", ctx, worker)
	ret0, _ := ret[0].([]sqlc.NextOccurence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyExpiredWork indicates an expected call of MyExpiredWork.
func (mr *MockStoreMockRecorder) MyExpiredWork(ctx, worker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyExpiredWork", reflect.TypeOf((*MockStore)(nil).MyExpiredWork), ctx, worker)
}

// ProveLiveliness mocks base method.
func (m *MockStore) ProveLiveliness(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProveLiveliness", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProveLiveliness indicates an expected call of ProveLiveliness.
func (mr *MockStoreMockRecorder) ProveLiveliness(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProveLiveliness", reflect.TypeOf((*MockStore)(nil).ProveLiveliness), ctx, id)
}

// RemoveDeadWorkers mocks base method.
func (m *MockStore) RemoveDeadWorkers(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeadWorkers", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeadWorkers indicates an expected call of RemoveDeadWorkers.
func (mr *MockStoreMockRecorder) RemoveDeadWorkers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeadWorkers", reflect.TypeOf((*MockStore)(nil).RemoveDeadWorkers), ctx)
}

// UpdateHistoryAndDeleteOccurence mocks base method.
func (m *MockStore) UpdateHistoryAndDeleteOccurence(ctx context.Context, params sqlc.UpdateHistoryAndDeleteOccurenceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistoryAndDeleteOccurence", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHistoryAndDeleteOccurence indicates an expected call of UpdateHistoryAndDeleteOccurence.
func (mr *MockStoreMockRecorder) UpdateHistoryAndDeleteOccurence(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistoryAndDeleteOccurence", reflect.TypeOf((*MockStore)(nil).UpdateHistoryAndDeleteOccurence), ctx, params)
}

// UpdateHistoryAndOccurence mocks base method.
func (m *MockStore) UpdateHistoryAndOccurence(ctx context.Context, schedule sqlc.Schedule, occurence sqlc.NextOccurence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistoryAndOccurence", ctx, schedule, occurence)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHistoryAndOccurence indicates an expected call of UpdateHistoryAndOccurence.
func (mr *MockStoreMockRecorder) UpdateHistoryAndOccurence(ctx, schedule, occurence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistoryAndOccurence", reflect.TypeOf((*MockStore)(nil).UpdateHistoryAndOccurence), ctx, schedule, occurence)
}

// UpdateSchedule mocks base method.
func (m *MockStore) UpdateSchedule(ctx context.Context, arg sqlc.UpdateScheduleParams) (sqlc.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", ctx, arg)
	ret0, _ := ret[0].(sqlc.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockStoreMockRecorder) UpdateSchedule(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockStore)(nil).UpdateSchedule), ctx, arg)
}

// UpdateStatusAndDetails mocks base method.
func (m *MockStore) UpdateStatusAndDetails(ctx context.Context, arg sqlc.UpdateStatusAndDetailsParams) (sqlc.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndDetails", ctx, arg)
	ret0, _ := ret[0].(sqlc.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusAndDetails indicates an expected call of UpdateStatusAndDetails.
func (mr *MockStoreMockRecorder) UpdateStatusAndDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndDetails", reflect.TypeOf((*MockStore)(nil).UpdateStatusAndDetails), ctx, arg)
}

// ValidSchedulesWithoutOccurence mocks base method.
func (m *MockStore) ValidSchedulesWithoutOccurence(ctx context.Context) ([]sqlc.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidSchedulesWithoutOccurence", ctx)
	ret0, _ := ret[0].([]sqlc.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidSchedulesWithoutOccurence indicates an expected call of ValidSchedulesWithoutOccurence.
func (mr *MockStoreMockRecorder) ValidSchedulesWithoutOccurence(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidSchedulesWithoutOccurence", reflect.TypeOf((*MockStore)(nil).ValidSchedulesWithoutOccurence), ctx)
}
