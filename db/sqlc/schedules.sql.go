// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: schedules.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
  id,
  cron,
  hook,
  owner,
  active,
  till,
  data,
  last_modified
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, now()
) RETURNING id, cron, hook, owner, data, active, till, created_at, last_modified
`

type CreateScheduleParams struct {
	ID     uuid.UUID `json:"id"`
	Cron   string    `json:"cron"`
	Hook   string    `json:"hook"`
	Owner  string    `json:"owner"`
	Active bool      `json:"active"`
	Till   time.Time `json:"till"`
	Data   string    `json:"data"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.ID,
		arg.Cron,
		arg.Hook,
		arg.Owner,
		arg.Active,
		arg.Till,
		arg.Data,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Cron,
		&i.Hook,
		&i.Owner,
		&i.Data,
		&i.Active,
		&i.Till,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, cron, hook, owner, data, active, till, created_at, last_modified FROM schedules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSchedule(ctx context.Context, id uuid.UUID) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Cron,
		&i.Hook,
		&i.Owner,
		&i.Data,
		&i.Active,
		&i.Till,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, cron, hook, owner, data, active, till, created_at, last_modified, COUNT(*) OVER () AS total_records FROM schedules
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListSchedulesParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListSchedulesRow struct {
	ID           uuid.UUID `json:"id"`
	Cron         string    `json:"cron"`
	Hook         string    `json:"hook"`
	Owner        string    `json:"owner"`
	Data         string    `json:"data"`
	Active       bool      `json:"active"`
	Till         time.Time `json:"till"`
	CreatedAt    time.Time `json:"created_at"`
	LastModified time.Time `json:"last_modified"`
	TotalRecords int64     `json:"total_records"`
}

func (q *Queries) ListSchedules(ctx context.Context, arg ListSchedulesParams) ([]ListSchedulesRow, error) {
	rows, err := q.db.QueryContext(ctx, listSchedules, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSchedulesRow{}
	for rows.Next() {
		var i ListSchedulesRow
		if err := rows.Scan(
			&i.ID,
			&i.Cron,
			&i.Hook,
			&i.Owner,
			&i.Data,
			&i.Active,
			&i.Till,
			&i.CreatedAt,
			&i.LastModified,
			&i.TotalRecords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedules 
SET cron = $2, hook = $3, active = $4, till = $5, data = $6, last_modified = now()
WHERE id = $1 RETURNING id, cron, hook, owner, data, active, till, created_at, last_modified
`

type UpdateScheduleParams struct {
	ID     uuid.UUID `json:"id"`
	Cron   string    `json:"cron"`
	Hook   string    `json:"hook"`
	Active bool      `json:"active"`
	Till   time.Time `json:"till"`
	Data   string    `json:"data"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, updateSchedule,
		arg.ID,
		arg.Cron,
		arg.Hook,
		arg.Active,
		arg.Till,
		arg.Data,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Cron,
		&i.Hook,
		&i.Owner,
		&i.Data,
		&i.Active,
		&i.Till,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const validSchedulesWithoutOccurence = `-- name: ValidSchedulesWithoutOccurence :many
SELECT id, cron, hook, owner, data, active, till, created_at, last_modified FROM schedules s
WHERE s.active = true AND s.till > now() AND s.id NOT IN (SELECT schedule FROM next_occurence)
`

func (q *Queries) ValidSchedulesWithoutOccurence(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, validSchedulesWithoutOccurence)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Cron,
			&i.Hook,
			&i.Owner,
			&i.Data,
			&i.Active,
			&i.Till,
			&i.CreatedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
