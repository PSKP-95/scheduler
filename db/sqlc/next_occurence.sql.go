// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: next_occurence.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOccurence = `-- name: CreateOccurence :one
INSERT INTO next_occurence (
  schedule,
  worker,
  manual,
  status,
  occurence,
  last_updated
) VALUES (
  $1, $2, $3, $4, $5, now()
) RETURNING id, schedule, worker, manual, status, occurence, last_updated
`

type CreateOccurenceParams struct {
	Schedule  uuid.UUID     `json:"schedule"`
	Worker    uuid.NullUUID `json:"worker"`
	Manual    bool          `json:"manual"`
	Status    Status        `json:"status"`
	Occurence sql.NullTime  `json:"occurence"`
}

func (q *Queries) CreateOccurence(ctx context.Context, arg CreateOccurenceParams) (NextOccurence, error) {
	row := q.db.QueryRowContext(ctx, createOccurence,
		arg.Schedule,
		arg.Worker,
		arg.Manual,
		arg.Status,
		arg.Occurence,
	)
	var i NextOccurence
	err := row.Scan(
		&i.ID,
		&i.Schedule,
		&i.Worker,
		&i.Manual,
		&i.Status,
		&i.Occurence,
		&i.LastUpdated,
	)
	return i, err
}
