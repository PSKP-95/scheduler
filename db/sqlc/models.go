// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Status string

const (
	StatusPending Status = "pending"
	StatusRunning Status = "running"
	StatusSuccess Status = "success"
	StatusFailure Status = "failure"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type History struct {
	Schedule    uuid.UUID `json:"schedule"`
	Status      Status    `json:"status"`
	Details     string    `json:"details"`
	ScehduledAt time.Time `json:"scehduled_at"`
	StartedAt   time.Time `json:"started_at"`
	CompletedAt time.Time `json:"completed_at"`
}

type NextOccurence struct {
	ID          int32         `json:"id"`
	Schedule    uuid.UUID     `json:"schedule"`
	Worker      uuid.NullUUID `json:"worker"`
	Manual      bool          `json:"manual"`
	Status      Status        `json:"status"`
	Occurence   sql.NullTime  `json:"occurence"`
	LastUpdated time.Time     `json:"last_updated"`
}

type PunchCard struct {
	ID        uuid.UUID    `json:"id"`
	LastPunch time.Time    `json:"last_punch"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type Schedule struct {
	ID     uuid.UUID `json:"id"`
	Cron   string    `json:"cron"`
	Hook   string    `json:"hook"`
	Owner  string    `json:"owner"`
	Data   string    `json:"data"`
	Active bool      `json:"active"`
	// till what timestamp this schedule will run
	Till         time.Time `json:"till"`
	CreatedAt    time.Time `json:"created_at"`
	LastModified time.Time `json:"last_modified"`
}
